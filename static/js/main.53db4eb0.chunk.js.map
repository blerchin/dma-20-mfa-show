{"version":3,"sources":["SoftBodies/index.js","App.js","serviceWorker.js","index.js"],"names":["fillShape","group","shape","stride","cb","bounds","x","min","max","y","particle","Query","collides","length","Composite","add","getClosestToPosition","bodies","closest","leastDistance","Infinity","i","dist","Math","sqrt","pow","position","getOuterParticles","radius","center","outerParticles","ang","PI","cos","sin","push","allBodies","getSvgPathFromParticles","particles","positions","map","p","path","getClose","body","maxDistance","close","addSprings","constraintOptions","stiffness","damping","render","visible","forEach","constraint","Constraint","create","bodyA","bodyB","createParticleGroup","Bodies","circle","particleRadius","particleOptions","density","restitution","friction","frictionStatic","console","log","SoftBodies","Array","n","name","blobRadius","wrapper","useRef","useState","paths","setPaths","useEffect","engine","Engine","world","runner","Runner","blobs","el","floor","World","rectangle","isStatic","run","Events","on","blob","ref","width","height","fill","stroke","d","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53db4eb0.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { Composite, Constraint, Bodies, Events, Engine, Query,Runner, World } from 'matter-js';\n\nfunction fillShape(group, shape, stride, cb) {\n    const bounds = shape.bounds;\n    for (let x = bounds.min.x; x < bounds.max.x; x += stride ) {\n        for (let y = bounds.min.y; y < bounds.max.y; y += stride) {\n            const particle = cb(x, y);\n            if (Query.collides(particle, [shape]).length) {\n                Composite.add(group, particle);\n            } \n        }\n    }\n}\n\nfunction getClosestToPosition(x, y, bodies) {\n    let closest = null;\n    let leastDistance = Infinity;\n    for(let i = 0; i < bodies.length; i++) {\n        const dist = Math.sqrt(Math.pow(x - bodies[i].position.x, 2) + Math.pow(y - bodies[i].position.y, 2));\n        if (dist < leastDistance) {\n            closest = bodies[i];\n            leastDistance = dist;\n        }\n    }\n    return closest;\n}\n\nfunction getOuterParticles(group, radius) {\n    const bounds = Composite.bounds(group);\n    const center = { x: bounds.min.x + (bounds.max.x - bounds.min.x) / 2, y: bounds.min.y + (bounds.max.y - bounds.min.y) / 2 }\n    const numOuter = 30;\n    const outerParticles = [];\n    for(let i = 0; i < numOuter; i++) {\n        const ang = (i / numOuter) * 2 * Math.PI;\n        const x = Math.cos(ang) * radius*1.2 + center.x;\n        const y = Math.sin(ang) * radius*1.2 + center.y;\n        outerParticles.push(getClosestToPosition(x, y, Composite.allBodies(group)));\n    }\n    return outerParticles;\n}\n\nfunction getSvgPathFromParticles(particles) {\n    const positions = particles.map((p) => [p.position.x, p.position.y]);\n    let path = `M ${positions[0][0]} ${positions[0][1]} `;\n    for (let i = 1; i < positions.length; i++) {\n        path += `L ${positions[i][0]} ${positions[i][1]} `;\n    }\n    return path  + 'z';\n}\n\n\nfunction getClose(body, bodies, maxDistance) {\n    let close = [];\n    for(let i = 0; i < bodies.length; i++) {\n        const dist = Math.sqrt(Math.pow(body.position.x - bodies[i].position.x, 2) + Math.pow(body.position.y - bodies[i].position.y, 2));\n        if (body !== bodies[i] && dist < maxDistance) {\n            close.push(bodies[i])\n        }\n    }\n    return close;\n}\n\nfunction addSprings(group, length, constraintOptions = { stiffness: 0.5, damping: 1.0, render: { visible: false } }) {\n    const particles = Composite.allBodies(group);\n    for (let i = 0; i < particles.length; i++) {\n        const close = getClose(particles[i], particles, length + 0.01);\n        /*const connections = Composite.allConstraints(group).reduce((m, c) => [...m, c.bodyA, c.bodyB], []);\n        console.log(connections);\n        const connectableBody = close.filter((body) => \n            connections.filter((b) => body === b).length < 3\n        );\n        */\n        close.forEach((particle) => {\n            const constraint = Constraint.create({\n                bodyA: particles[i],\n                bodyB: particle,\n                ...constraintOptions\n            });\n            Composite.add(group, constraint);\n        });\n    }\n}\n\nfunction createParticleGroup(shape = Bodies.circle(100, 100, 10), particleRadius, particleOptions = { density: 10, restitution: 0, friction: 1, frictionStatic: 10}, constraintOptions = null) {\n    console.log(\"create group\")\n    const group = Composite.create();\n    fillShape(group, shape, 2 * particleRadius, (x, y) => Bodies.circle(x, y, particleRadius, particleOptions));\n    addSprings(group, particleRadius * 2);\n    return group;\n}\n\nexport default function SoftBodies({ \n        bodies = [...Array(11)].map((n) => ({ name: `Artist ${n}`})) },\n        particleOptions = {\n            friction: 0.3,\n            frictionStatic: 0.5,\n            render: { visible: true}\n        },\n        blobRadius = 60,\n        particleRadius = 10\n    ) {\n    const wrapper = useRef(null);\n    const [paths, setPaths] = useState([]);\n\n    useEffect(() => {\n        const engine = Engine.create();\n        const world = engine.world;\n        \n        const runner = Runner.create();\n        const blobs = bodies.map((el, i) => createParticleGroup(\n            Bodies.circle(80 + (i % 4) * 200, 100 + Math.floor(i/4) * 100, blobRadius),\n            particleRadius\n            ));\n        World.add(world, [\n            ...blobs,\n            //walls\n            Bodies.rectangle(400, 0, 1600, 50, { isStatic: true }),\n            Bodies.rectangle(400, 800, 1600, 50, { isStatic: true }),\n            Bodies.rectangle(1200, 300, 50, 1000, { isStatic: true }),\n            Bodies.rectangle(0, 300, 50, 1000, { isStatic: true })\n        ]);\n        Runner.run(runner, engine);\n        Events.on(runner, \"afterTick\", () => {\n            setPaths(blobs.map((blob) => getSvgPathFromParticles(getOuterParticles(blob, blobRadius))))\n        })\n    }, []);\n\n    \n\n    return (\n        <div ref={wrapper}>\n            <svg width={1280} height={800}> \n                { paths.map((path) => (<path fill=\"transparent\" stroke=\"black\" d={path} />)) }\n            </svg>\n         </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport SoftBodies from 'src/SoftBodies';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SoftBodies />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
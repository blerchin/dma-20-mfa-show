{"version":3,"sources":["index/style.module.css","config.js","utils.js","lsystems.js","index/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","artists","name","line","pointA","pointB","lengthX","lengthY","length","Math","sqrt","pow","angle","atan2","controlPoint","current","previous","next","reverse","smoothing","p","n","o","PI","x","cos","y","sin","render","svgPath","width","height","rules","iterations","constants","axiom","distance","cmds","lsys","LSystems","LSystemsProcessor","forEach","rule","addRule","generate","generateCmdString","renderer","TurtleRenderer","setAngle","setConstants","setDistance","process","RAD","StringBuffer","len","this","buffer","Array","count","undefined","_width","_height","_colourList","_constants","prototype","_xOffset","_yOffset","_distance","_angle","_minx","_miny","_maxx","_maxy","_maxStackDepth","_stack","_renderLineWidths","setRenderLineWidths","val","getMinMaxValues","Dimension","setOffsets","xOffset","yOffset","i","c","charAt","pathEl","smooth","stroke","rad","pos","Location","stack","points","colour","heading","push","pop","path","startCP","endCP","xoffset","yoffset","setAttribute","rulePart","substring","result","toString","append","minx","miny","maxx","maxy","s","join","getAngleAndXOffset","amtScrolled","min","max","window","innerWidth","Index","useRef","useState","setAmtScrolled","wander","setWander","wanderDir","setWanderDir","useEffect","renderLSys","innerHeight","interval","setInterval","amt","clearInterval","updateAmtScrolled","evt","scrollY","document","body","scrollHeight","addEventListener","removeEventListener","className","wrapper","animation","textPath","style","transform","id","fill","ref","names","alignmentBaseline","method","href","side","config","map","key","App","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9625c09d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__zcgSn\",\"animation\":\"style_animation__3a5vm\",\"textPath\":\"style_textPath__1nfT3\",\"names\":\"style_names__1lq3_\"};","export default {\n    artists: [\n        {\n            name: 'Zeynep Abes'\n        }, {\n            name: 'Graham Akins'\n        }, {\n            name: 'Berfin Ataman'\n        }, {\n            name: 'Erin Cooney'\n        }, {\n            name: 'Clara Leivas'\n        }, {\n            name: 'Ben Lerchin'\n        }, {\n            name: \"Blaine O'Neill\"\n        }, {\n            name: 'Miles Peyton'\n        }, {\n            name: 'Hirad Sab'\n        }, {\n            name: 'Dalena Tran'\n        }, {\n            name: 'Leming Z/C'\n        }\n        \n    ]\n}","export const line = (pointA, pointB) => {\n    const lengthX = pointB[0] - pointA[0]\n    const lengthY = pointB[1] - pointA[1]\n    return {\n      length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n      angle: Math.atan2(lengthY, lengthX)\n    }\n  }\n\nexport const controlPoint = (current, previous, next, reverse, smoothing = 0.4) => {\n    // When 'current' is the first or last point of the array\n    // 'previous' or 'next' don't exist.\n    // Replace with 'current'\n    const p = previous || current\n    const n = next || current\n    // Properties of the opposed-line\n    const o = line(p, n)\n    // If is end-control-point, add PI to the angle to go backward\n    const angle = o.angle + (reverse ? Math.PI : 0)\n    const length = o.length * smoothing\n    // The control point position is relative to the current point\n    const x = current[0] + Math.cos(angle) * length\n    const y = current[1] + Math.sin(angle) * length\n    return [x, y]\n}","import { controlPoint } from 'src/utils';\n/**\n * L-Systems\n * \n * JavaScript Canvas 04/03/09\n * @author Kevin Roast  kevtoast at yahoo.com\n * Updated: 16th July 2012\n * \n\n/**\n * L-Systems processing steps\n */\nfunction generateCmdString(rules, iterations = 10, axiom = 'FX')\n{\n    var lsys = new LSystems.LSystemsProcessor();\n    lsys.iterations = iterations;\n    lsys.axiom = axiom;\n    rules.forEach((rule) => lsys.addRule(rule));\n    return lsys.generate();\n}\n\nexport function render( svgPath, { width, height, rules, iterations, angle, constants, axiom, distance = 10 }) {\n    const cmds = generateCmdString(rules, iterations, axiom);\n    const renderer = new LSystems.TurtleRenderer(width, height);\n    renderer.setAngle(angle);\n    renderer.setConstants(constants);\n    renderer.setDistance(distance);\n    renderer.process(cmds, svgPath, true);\n}\n\nexport const examples =\n[\n   [\n      // Heighway Dragon\n      12, 90, \"\", \"FX\", \"X=X+YF+\", \"Y=-FX-Y\"\n   ],\n   [\n      // Koch Curve\n      4, 90, \"\", \"-F\", \"F=F+F-F-F+F\"\n   ],\n   [\n      // Kevs Tree\n      5, 22, \"\", \"F\", \"F=C0FF-[C1-F+F+F]+[C2+F-F-F]\"\n   ],\n   [\n      // Kevs Wispy Tree\n      5, 25, \"\", \"FX\", \"F=C0FF-[C1-F+F]+[C2+F-F]\", \"X=C0FF+[C1+F]+[C3-F]\"\n   ],\n   [\n      // Kevs Pond Weed\n      5, 27, \"\", \"F\", \"F=C0FF[C1-F++F][C2+F--F]C3++F--F\"\n   ],\n   [\n      // Sierpinski triangle (curves)\n      7, 60, \"\", \"A\", \"A=B-A-B\", \"B=A+B+A\"\n   ],\n   [\n      // Sierpinski triangle (triangles)\n      6, 120, \"\", \"F-G-G\", \"F=F-G+F+G-F\", \"G=GG\"\n   ],\n   [\n      // Dragon Curve\n      10, 90, \"F\", \"FX\", \"X=X+YF\", \"Y=FX-Y\"\n   ],\n   [\n      // Fractal Plant\n      6, 25, \"X\", \"X\", \"X=C0F-[C2[X]+C3X]+C1F[C3+FX]-X\", \"F=FF\"\n   ],\n   [\n      // Koch Snowflake\n      4, 60, \"X\", \"F++F++F\", \"F=F-F++F-F\", \"X=FF\"\n   ],\n   [\n      // Pleasant Error\n      4, 72, \"\", \"F-F-F-F-F\", \"F=F-F++F+F-F-F\"\n   ],\n   [\n      // Sierpinski's Carpet\n      4, 90, \"\", \"F\", \"F=F+F-F-F-G+F+F+F-F\", \"G=GGG\"\n   ],\n   [\n      // Space Filling Curve\n      6, 90, \"XY\", \"X\", \"X=-YF+XFX+FY-\", \"Y=+XF-YFY-FX+\"\n   ],\n   [\n      // Sierpinski Median Curve\n      8, 45, \"\", \"L--F--L--F\", \"L=+R-F-R+\", \"R=-L+F+L-\"\n   ],\n   [\n      // Lace\n      6, 30, \"\", \"W\", \"W=+++X--F--ZFX+\", \"X=---W++F++YFW-\", \"Y=+ZFX--F--Z+++\", \"Z=-YFW++F++Y---\"\n   ],\n   [\n      // Joined Cross Curves\n      3, 90, \"F\", \"XYXYXYX+XYXYXYX+XYXYXYX+XYXYXYX\", \"F=\", \"X=FX+FX+FXFY-FY-\", \"Y=+FX+FXFY-FY-FY\"\n   ],\n   [\n      // Penrose Tiling\n      5, 36, \"6 7 8 9\", \"[7]++[7]++[7]++[7]++[7]\", \"6=81++91----71[-81----61]++\", \"7=+81--91[---61--71]+\", \"8=-61++71[+++81++91]-\", \"9=--81++++61[+91++++71]--71\", \"1=\"\n   ]\n];\n\n\n/**\n * LSystems root namespace.\n * \n * @namespace LSystems\n */\nif (typeof LSystems == \"undefined\" || !LSystems)\n{\n   var LSystems = {};\n}\n\n// Public constants\nconst ANTICLOCK  = '+';\nconst CLOCKWISE  = '-';\nconst PUSH       = '[';\nconst POP        = ']';\nconst COLOUR     = 'C';\n\nconst RAD = Math.PI/180.0;\n\n\n/**\n * TurtleRenderer class\n * \n * @namespace LSystems\n * @class LSystems.TurtleRenderer\n */\n(function()\n{\n   LSystems.TurtleRenderer = function(width, height)\n   {\n      if (width !== undefined && width !== null)\n      {\n         this._width = width;\n      }\n      if (height !== undefined && height !== null)\n      {\n         this._height = height;\n      }\n      \n      this._colourList = [\"rgba(140, 80, 60, 0.75)\", \"rgba(24, 180, 24, 0.75)\", \"rgba(48, 220, 48, 0.5)\", \"rgba(64, 255, 64, 0.5)\"];\n      this._constants = [];\n      \n      return this;\n   };\n   \n   LSystems.TurtleRenderer.prototype =\n   {\n      /**\n       * Rendering area width\n       * \n       * @property _width\n       * @type number\n       */\n      _width: 0,\n      \n      /**\n       * Rendering area height\n       * \n       * @property _height\n       * @type number\n       */\n      _height: 0,\n      \n      /**\n       * Rendering X coordinate offset\n       * \n       * @property _xOffset\n       * @type number\n       */\n      _xOffset: 0,\n      \n      /**\n       * Rendering Y coordinate offset\n       * \n       * @property _yOffset\n       * @type number\n       */\n      _yOffset: 0,\n      \n      /**\n       * Rendering distance units per forward turtle movement (default 10)\n       * \n       * @property _distance\n       * @type number\n       */\n      _distance: 10,\n      \n      /**\n       * Turning angle in degrees to use per turtle rotation (default 30.0)\n       * \n       * @property _angle\n       * @type number\n       */\n      _angle: 30,\n      \n      /**\n       * Minimum X coordinate reached during last processing phase\n       * \n       * @property _minx\n       * @type number\n       */\n      _minx: 0,\n      \n      /**\n       * Minimum Y coordinate reached during last processing phase\n       * \n       * @property _miny\n       * @type number\n       */\n      _miny: 0,\n      \n      /**\n       * Maximum X coordinate reached during last processing phase\n       * \n       * @property _maxx\n       * @type number\n       */\n      _maxx: 0,\n      \n      /**\n       * Maximum Y coordinate reached during last processing phase\n       * \n       * @property _maxy\n       * @type number\n       */\n      _maxy: 0,\n      \n      /**\n       * The maximum stack depth reached during processing\n       * \n       * @property _maxStackDepth\n       * @type number\n       */\n      _maxStackDepth: 0,\n      \n      /**\n       * Rendering stack\n       * \n       * @property _stack\n       * @type object\n       */\n      _stack: null,\n      \n      /**\n       * Colour list\n       * \n       * @property _colourList\n       * @type object\n       */\n      _colourList: null,\n      \n      /**\n       * Constant values to ignore during turtle rendering\n       * \n       * @property _constants\n       * @type Array\n       */\n      _constants: null,\n      \n      /**\n       * Render line width based on stack depth\n       * \n       * @property _renderLineWidths\n       * @type boolean\n       */\n      _renderLineWidths: true,\n      \n      /**\n       * Set rendering distance units per forward turtle movement.\n       *\n       * @method setDistance\n       * @param distance {number} Distance units per forward turtle movement\n       * @return {LSystems.TurtleRenderer} returns 'this' for method chaining\n       */\n      setDistance: function setDistance(distance)\n      {\n         this._distance = distance;\n         return this;\n      },\n      \n      /**\n       * Set turning angle in degrees to use per turtle rotation.\n       *\n       * @method setDistance\n       * @param angle {number} Turning angle in degrees to use per turtle rotation\n       * @return {LSystems.TurtleRenderer} returns 'this' for method chaining\n       */\n      setAngle: function setAngle(angle)\n      {\n         this._angle = angle;\n         return this;\n      },\n      \n      setRenderLineWidths: function setRenderLineWidths(val)\n      {\n         this._renderLineWidths = val;\n      },\n      \n      /**\n       * Return the min/max coordinate values reached during last processing run.\n       *\n       * @method getMinMaxValues\n       * @return {LSystems.Dimension} representing the min/max coordinate values.\n       */\n      getMinMaxValues: function getMinMaxValues()\n      {\n         return new LSystems.Dimension(this._minx, this._miny, this._maxx, this._maxy);\n      },\n      \n      /**\n       * Set the x/y coordinate offsets for coordinate translation during rendering.\n       * \n       * @method setOffsets\n       * @param xOffset {number} x coord offset\n       * @param yOffset {number} y coord offset\n       */\n      setOffsets: function(xOffset, yOffset)\n      {\n         if (xOffset !== undefined && xOffset !== null)\n         {\n            this._xOffset = xOffset;\n         }\n         if (yOffset !== undefined && yOffset !== null)\n         {\n            this._yOffset = yOffset;\n         }\n      },\n      \n      setConstants: function(constants)\n      {\n         this._constants = [];\n         if (constants && constants.length !== 0)\n         {\n            for (var i=0; i<constants.length; i++)\n            {\n               var c = constants.charAt(i);\n               if (c != ' ' && c != ',')\n               {\n                  this._constants[c] = true;\n               }\n            }\n         }\n      },\n      \n      /*\n       * Process the command string and render\n       * \n       * @method process\n       * @param cmds {string}    string of valid command characters\n       * @param draw {boolean}   True if the turtle should draw, false otherwise\n       */\n      process: function process(cmds, pathEl, smooth = false)\n      {\n         this._stack = [];\n         \n         var angle = this._angle;\n         var distance = this._distance;\n         var lastX;\n         var lastY;\n         \n         if (pathEl)\n         {\n            // clear the background \n            //ctx.save();\n            //ctx.fillStyle = \"rgb(255,255,255)\";\n            //ctx.fillRect(0, 0, this._width, this._height);\n            \n            // offset as required\n            //pathEl.setAttribute('transform', `translate(${this._xOffset}, ${this._yOffset})`);\n            // initial colour if specific colouring not used\n            pathEl.stroke = 'rgb(0,0,0)';\n         }\n         \n         // start at grid 0,0 facing north with no colour index\n         var pos = new LSystems.Location(0.0, 0.0, 90.0, -1);\n         \n         // process each command in turn\n         var yOffset = this._yOffset;\n         var stack = this._stack;\n         var rad;\n         var c, len = cmds.length;\n         let points = [];\n         for (var i=0; i<len; i++)\n         {\n            c = cmds.charAt(i);\n            \n            switch (c)\n            {\n               case COLOUR:\n               {\n                  // get colour index from next character\n                  pos.colour = (cmds.charAt(++i) - '0');\n                  break;\n               }\n               \n               case ANTICLOCK:\n               {\n                  pos.heading += angle;\n                  break;\n               }\n               \n               case CLOCKWISE:\n               {\n                  pos.heading -= angle;\n                  break;\n               }\n               \n               case PUSH:\n               {\n                  stack.push(new LSystems.Location(pos.x, pos.y, pos.heading, pos.colour));\n                  break;\n               }\n               \n               case POP:\n               {\n                  pos = stack.pop();\n                  break;\n               }\n               \n               default:\n               {\n                  if (!this._constants[c])\n                  {\n                     lastX = pos.x;\n                     lastY = pos.y;\n                     \n                     // move the turtle\n                     rad = pos.heading * RAD;\n                     pos.x += distance * Math.cos(rad);\n                     pos.y += distance * Math.sin(rad);\n                     \n                     if (pathEl)\n                     {\n                        points.push([pos.x, pos.y])\n                     }\n                     // remember min/max position\n                     if (pos.x < this._minx) this._minx = pos.x;\n                     else if (pos.x > this._maxx) this._maxx = pos.x;\n                     if (pos.y < this._miny) this._miny = pos.y;\n                     else if (pos.y > this._maxy) this._maxy = pos.y;\n                     if (stack.length > this._maxStackDepth) this._maxStackDepth = stack.length;\n                  }\n                  break;\n               }\n            }\n         }\n        if (pathEl) {\n         let path = `M ${points[0][0]} ${points[0][1]} `;\n         for (let i=1; i < points.length; i++) {\n            if (smooth) {\n               const startCP = controlPoint(points[i - 1], points[i - 2], points[i]);\n               const endCP = controlPoint(points[i - 1], points[i - 2], points[i]);\n               path += `C ${startCP[0]} ${startCP[1]} ${endCP[0]} ${endCP[1]} ${points[i][0]} ${points[i][1]} `;\n            } else {\n               path += `L ${points[i][0]} ${points[i][1]} `;\n            }\n         }\n         var xoffset = (this._width / 2 ) - (((this._maxx - this._minx) / 2) + this._minx);\n         var yoffset = (this._height / 2) - (((this._maxy - this._miny) / 2) + this._miny);\n         pathEl.setAttribute('transform', `translate(${xoffset}, ${yoffset})`);\n         pathEl.setAttribute('d', path);\n        }\n      }\n   };\n})();\n\n/**\n * LSystemsProcessor class\n * \n * @namespace LSystems\n * @class LSystems.LSystemsProcessor\n */\n(function()\n{\n   LSystems.LSystemsProcessor = function()\n   {\n      this.rules = [];\n      return this;\n   };\n   \n   LSystems.LSystemsProcessor.prototype =\n   {\n      /**\n       * Number of iterations to perform\n       * \n       * @property iterations\n       * @type number\n       */\n      iterations: 1,\n      \n      /**\n       * Root axiom\n       * \n       * @property axiom\n       * @type string\n       */\n      axiom: null,\n      \n      /**\n       * Array of rules to process\n       * \n       * @property rules\n       * @type Array\n       */\n      rules: null,\n      \n      /**\n       * Add a rule to the processor.\n       * \n       * @method process\n       * @param rule {string}  Rules must be of form: F=FX\n       */\n      addRule: function addRule(rule)\n      {\n         if (rule.length < 2 || rule.charAt(1) !== '=')\n         {\n            throw \"Rule must be of form: F=FX\";\n         }\n         var rulePart = \"\";\n         if (rule.length > 2)\n         {\n            rulePart = rule.substring(2);\n         }\n         \n         this.rules[rule.charAt(0)] = rulePart;\n      },\n      \n      /**\n       * Generate the l-system command string based on the axiom, rules and number of iterations to perform.\n       * \n       * @method process\n       */\n      generate: function generate()\n      {\n         var ruleCount = this.rules.length;\n         var axiom = null;\n         var result = null;\n         \n         // process for each iteration\n         for (var i = 0; i < this.iterations; i++)\n         {\n            if (i == 0)\n            {\n               // start with user defined root axiom\n               axiom = this.axiom;\n            }\n            else\n            {\n               // use last result as new axiom\n               axiom = result.toString();\n            }\n            \n            result = new StringBuffer();\n            \n            // process each character of the Axiom\n            for (var c, len = axiom.length, rule, rules=this.rules, n=0; n<len; n++)\n            {\n               c = axiom.charAt(n);\n               \n               // TODO: try array/strings etc.\n               rule = rules[c];\n               result.append(rule != null ? rule : c);\n               \n               if (result.length() > 100000000)\n               {\n                  throw \"Generated command string too large! 100,000,000 commands max.\";\n               }\n            }\n         }\n         \n         return result.toString();\n      }\n   };\n})();\n\n\n/**\n * Location structure class - all fields are public.\n * \n * @namespace LSystems\n * @class LSystems.Location\n */\n(function()\n{\n   LSystems.Location = function(x, y, heading, colour)\n   {\n      this.x = x;\n      this.y = y;\n      this.heading = heading;\n      this.colour = colour;\n      \n      return this;\n   };\n   \n   LSystems.Location.prototype =\n   {\n      /**\n       * X coordinate\n       * \n       * @property x\n       * @type number\n       */\n      x: 0,\n      \n      /**\n       * Y coordinate\n       * \n       * @property y\n       * @type number\n       */\n      y: 0,\n      \n      /**\n       * Heading angle\n       * \n       * @property heading\n       * @type number\n       */\n      heading: 0,\n      \n      /**\n       * Colour index\n       * \n       * @property colour\n       * @type number\n       */\n      colour: 0\n   };\n})();\n\n\n/**\n * Dimension structure class - all fields are public.\n * \n * @namespace LSystems\n * @class LSystems.Dimension\n */\n(function()\n{\n   LSystems.Dimension = function(minx, miny, maxx, maxy)\n   {\n      this.minx = minx;\n      this.miny = miny;\n      this.maxx = maxx;\n      this.maxy = maxy;\n      \n      return this;\n   };\n   \n   LSystems.Dimension.prototype =\n   {\n      /**\n       * Minimum X coordinate\n       * \n       * @property minx\n       * @type number\n       */\n      minx: 0,\n      \n      /**\n       * Minimum Y coordinate\n       * \n       * @property miny\n       * @type number\n       */\n      miny: 0,\n      \n      /**\n       * Maximum X coordinate\n       * \n       * @property heading\n       * @type number\n       */\n      maxx: 0,\n      \n      /**\n       * Maximum Y coordinate\n       * \n       * @property miny\n       * @type number\n       */\n      maxy: 0\n   };\n})();\n\n\n/**\n * StringBuffer object\n */\nfunction StringBuffer(len)\n{\n   this.buffer = len ? new Array(len) : [];\n   this.count = 0;\n   return this;\n}\n\nStringBuffer.prototype.append = function append(s)\n{\n   this.buffer.push(s);\n   this.count += s.length;\n   return this;\n};\n\nStringBuffer.prototype.length = function length()\n{\n   return this.count;\n};\n\nStringBuffer.prototype.toString = function toString()\n{\n   return this.buffer.join(\"\");\n};\n\nexport default LSystems;","import React, { useEffect, useRef, useState } from 'react';\nimport config from 'src/config';\nimport { render as renderLSys } from 'src/lsystems';\nimport { animation, names, textPath, wrapper } from './style.module.css';\n\nconst MAX_ANGLE = 90;\n\nconst getAngleAndXOffset = (amtScrolled) => {\n  const scrollStop = .8;\n  const angleComponent = Math.min(1, amtScrolled / scrollStop);\n  const xOffsetComponent = Math.max(0, amtScrolled - scrollStop) / (1 - scrollStop) ;\n  const angle = (angleComponent * -1 * MAX_ANGLE) + MAX_ANGLE ;\n  const xOffset = xOffsetComponent * -window.innerWidth;\n  return [angle, xOffset];\n}\n \nexport default function Index() {\n  const pathEl = useRef(null);\n  const [amtScrolled, setAmtScrolled] = useState(0);\n  const [wander, setWander] = useState(0);\n  const [wanderDir, setWanderDir] = useState(1);\n  \n  useEffect(() => {\n    const angle = getAngleAndXOffset(amtScrolled)[0] + wander;\n    renderLSys(pathEl.current, {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      iterations: 8, \n      angle,\n      constants: \"F\", \n      distance: 4,\n      axiom: \"FX\",\n      rules: [\"X=X+YF\", \"Y=FX-Y\"]\n    });\n  }, [amtScrolled, wander]);\n  useEffect(() => {\n    const interval = window.setInterval(() => {\n      const amt = 0.01 * wanderDir;\n      if (wander >= 1) {\n        setWanderDir(-1);\n      } else if (wander <= 0) {\n        setWanderDir(1);\n      }\n      setWander(wander + amt);\n    }, 40);\n    return () => window.clearInterval(interval);\n  })\n  \n  useEffect(() => {\n    const updateAmtScrolled = (evt) => setAmtScrolled(window.scrollY / (document.body.scrollHeight - window.innerHeight));\n    window.addEventListener('scroll', updateAmtScrolled);\n    return () => window.removeEventListener('scroll', updateAmtScrolled);\n  })\n\n  return (\n     <div className={wrapper}>\n        <svg className={animation}>\n          <g className={textPath} style={{ transform: `rotate(-90deg) translate(0, ${getAngleAndXOffset(amtScrolled)[1]}px)` }}>\n            <path id=\"lsystem\" fill=\"transparent\" stroke=\"transparent\" ref={pathEl} />\n            <text className={names} height={3000} width={3000}>\n              <textPath alignmentBaseline=\"middle\" method=\"stretch\" href=\"#lsystem\" side=\"right\">\n                {config.artists.map(({ name }) => name).join(' | ')}\n              </textPath>\n            </text>\n          </g>\n         </svg>\n         <noscript>\n          <ul>\n              { config.artists.map(({ name }) =>\n              <li key={name}>{name}</li>\n              )}\n          </ul>\n         </noscript>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Index from 'src/index/Index.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Index />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}